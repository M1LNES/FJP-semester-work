<program> ::= <definitions> <statements>

<definitions> ::= <var-definition> 
                         | <const-definition> 
                         | <function-definition> 
                         | <definitions> <var-definition> 
                         | <definitions> <const-definition> 
                         | <definitions> <function-definition>

<const-definition> ::= "const" <data-type> <identifier> "=" <constant-value> ";"

<var-definition> ::= <data-type> <identifier> "=" <expression> ";"

<function-definition> ::= <data-type> <identifier> "(" <parameters> ")" "{" <statements> "return" <expression> ";" "}"

<data-type> ::= "short" | "int" | "long" | "float" | "boolean" | "string"

<statements> ::= <statement> | <statements> <statement>

<statement> ::= <assignment>
                         | <parallel-assignment>
                         | <if-statement>
                         | <while-statement>
                         | <do-while-statement>
                         | <for-statement>
                         | <switch-statement>
                         | <function-call> ";"
                         | <expression> ";"

<assignment> ::= <identifier-list> "=" <expression> ";"

<parallel-assignment> ::= "{" <identifier-list> "}" "=" "{" <expression-list> "}" ";"

<identifier-list> ::= <identifier> | <identifier-list> "," <identifier>

<expression-list> ::= <expression> | <expression-list> "," <expression>

<if-statement> ::= "if" "(" <logical-expression> ")" "{" <statements> "}" <optional-else>

<optional-else> ::= "else" "{" <statements> "}" | ε

<while-statement> ::= "while" "(" <logical-expression> ")" "{" <statements> "}"

<do-while-statement> ::= "do" "{" <statements> "}" "while" "(" <logical-expression> ")" ";"

<for-statement> ::= "for" "(" <var-definition> <logical-expression> ";" <assignment> ")" "{" <statements> "}"

<switch-statement> ::= "switch" "(" <expression> ")" "{" <case-block> <optional-default> "}"

<case-block> ::= <case-clause> | <case-block> <case-clause>

<case-clause> ::= "case" <constant-value> ":" <statements> "break;" 

<optional-default> ::= "default:" <statements> "break;" | ε

<function-call> ::= <identifier> "(" <arguments> ")"

<logical-expression> ::= <logical-term> | <logical-expression> "||" <logical-term>

<logical-term> ::= <logical-factor> | <logical-term> "&&" <logical-factor>

<logical-factor> ::= <comparison-expression> | "!" <logical-factor> | <boolean-value>

<comparison-expression> ::= <expression> <comparison-operator> <expression>
<expression> ::= <arithmetic-expression> 
                          | <logical-factor> 
                          | <string-expression>
                          | <function-call>

<string-expression> ::= <string-term> | <string-expression> "+" <string-term>

<string-term> ::= <string> | <identifier> | <function-call>

<arithmetic-expression> ::= <term> | <arithmetic-expression> <add-operator> <term>

<term> ::= <factor> | <term> <mul-operator> <factor>

<factor> ::= <integer> 
                 | <float> 
                 | <boolean-value>
                 | <identifier>
                 | "(" <expression> ")" 

<parameters> ::= <data-type> <identifier> | <parameters> "," <data-type> <identifier>

<arguments> ::= <expression> | <arguments> "," <expression> | ε

<comparison-operator> ::= "==" | "===" | "!=" | "<" | "<=" | ">" | ">="

<add-operator> ::= "+" | "-"

<mul-operator> ::= "*" | "/"

<identifier> ::= <letter> <identifier-tail>

<identifier-tail> ::= <letter> <identifier-tail> | <digit> <identifier-tail> | ε

<integer> ::= <digit> <integer-tail>

<integer-tail> ::= <digit> <integer-tail> | ε

<float> ::= <integer> "." <integer>

<boolean-value> ::= "true" | "false"

<string> ::= "\"" <string-content> "\""

<string-content> ::= <letter> <string-content> | <digit> <string-content> | ε

<constant-value> ::= <integer> | <float> | <boolean-value> | <string>

<letter> ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
           | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"

<digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"